{"version":3,"file":"static/js/842.8e71d241.chunk.js","mappings":"0LACA,MAA4B,gC,oBCDfA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtBC,EAAe,SAAAH,GAAK,OAAIA,EAAMI,MAAV,E,UCAjC,GAAiB,E,mBCMJC,EAAS,WAClB,IAAMC,GAAWC,EAAAA,EAAAA,MACXH,GAASI,EAAAA,EAAAA,IAAYL,GAO3B,OACI,iCACA,eAAIM,UAAWC,EAAAA,MAAf,SAAwB,cAEpB,mBAAOD,UAAWC,EAAAA,MAAlB,WACI,iBAAMD,UAAWC,EAAAA,YAAjB,SAAgC,2BAChC,kBACIC,SAZK,SAAAC,GACjBN,GACIO,EAAAA,EAAAA,GAAUD,EAAME,OAAOC,OAC9B,EAUeA,MAAOX,EACPY,KAAK,OACLC,KAAK,SACLC,YAAY,OACZT,UAAWC,EAAAA,MACXS,QAAQ,yHACRC,MAAM,wBACNC,UAAQ,SAK3B,ECnCD,EAAuB,2BCAvB,GAAiB,ECGJC,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACpBjB,GAAWC,EAAAA,EAAAA,MAKjB,OACI,gBAAIE,UAAWC,EAAAA,KAAQc,GAAID,EAAYC,GAAvC,WACA,iBAAMf,UAAWC,EAAAA,KAAjB,SAA0Ba,EAAYN,QACtC,cAAGQ,KAAI,cAASF,EAAYG,QAAUjB,UAAWC,EAAAA,OAAjD,SACKa,EAAYG,UAGjB,mBAAQV,KAAK,SAASW,QAXd,WACRrB,GAASsB,EAAAA,EAAAA,IAAcL,EAAYC,IACtC,EASuC,aAAW,iBAA/C,SAAgE,aAKvE,ECjBYK,EAAe,WACxB,IAAM5B,GAAWO,EAAAA,EAAAA,IAAYT,GACvBK,GAASI,EAAAA,EAAAA,IAAYL,GAErB2B,EAAmB7B,EAASG,QAAO,SAAA2B,GACrC,OAAOA,EAAGd,KAAKe,cAAcC,SAAS7B,EAAO4B,cAChD,IAED,OACI,eAAIvB,UAAWC,EAAf,SACKoB,EAAiBI,KAAI,SAAAC,GAAO,OAC7B,SAACb,EAAD,CAAaC,YAAaY,GAAcA,EAAQX,GADnB,KAKxC,ECnBD,GAAgB,MAAQ,wBCEXY,EAAU,SAAC,GAAyB,IAAvBhB,EAAsB,EAAtBA,MAAOiB,EAAe,EAAfA,SAC7B,OACI,qBAAS5B,UAAWC,EAAAA,QAApB,WACI,eAAID,UAAWC,EAAAA,MAAf,SAAyBU,IACxBiB,IAGZ,ECTD,EAAwB,4BCEXC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC3B,OAAO,eAAI9B,UAAWC,EAAf,SAAyB6B,GACnC,E,UCJD,GAAgB,KAAO,0BAA0B,MAAQ,2BAA2B,IAAM,yBAAyB,SAAW,8BAA8B,OAAS,4BAA4B,KAAO,0BAA0B,kBAAkB,sCCkBzOC,EAAS,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACrB,EAAIsB,GAWvD,OAREtB,IAFFsB,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,ECZPG,EAAc,WACvB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOjC,EAAP,KAAakC,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOxB,EAAP,KAAe0B,EAAf,KACM9C,GAAWC,EAAAA,EAAAA,MACXN,GAAWO,EAAAA,EAAAA,IAAYT,GACvBsD,EAAcb,IACdc,EAAgBd,IAEhBe,EAAoB,SAAA3C,GACtB,MAAwBA,EAAME,OAAtBG,EAAR,EAAQA,KAAMF,EAAd,EAAcA,MAED,SAATE,GAAiBkC,EAAQpC,GAChB,WAATE,GAAmBmC,EAAUrC,EACpC,EAYKyC,EAAQ,WACVL,EAAQ,IACRC,EAAU,GACb,EAED,OACI,kBAAM3C,UAAWC,EAAAA,KAAQ+C,SAhBR,SAAA7C,GAEjB,GADAA,EAAM8C,iBACFzD,EAAS0D,MAAK,SAAA5B,GAAE,OAAIA,EAAGd,KAAKe,gBAAkBf,EAAKe,aAAnC,IAChB,OAAO4B,MAAM,mBAAD,OAAoB3C,IAEpCX,GAASuD,EAAAA,EAAAA,IAAW,CAAE5C,KAAMA,EAAMS,OAAQA,EAAQF,GAAIgB,OAEtDgB,GACH,EAQG,WACI,mBAAO/C,UAAWC,EAAAA,MAASc,GAAI6B,EAA/B,WACI,iBAAM5C,UAAWC,EAAAA,YAAjB,SAAgC,UAChC,kBACIM,KAAK,OACLC,KAAK,OACLF,MAAOE,EACPN,SAAU4C,EACVrC,YAAY,eACZ,aAAW,sBACXT,UAAWC,EAAAA,MACXS,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRG,GAAI6B,QAIZ,mBAAO5C,UAAWC,EAAAA,MAASc,GAAI8B,EAA/B,WACI,iBAAM7C,UAAWC,EAAAA,YAAjB,SAAgC,YAChC,kBACIK,MAAOW,EACPf,SAAU4C,EACVvC,KAAK,MACLC,KAAK,SACLC,YAAY,eACZ,aAAW,8BACXT,UAAWC,EAAAA,MACXU,MAAM,+FACNC,UAAQ,EACRG,GAAI8B,QAIhB,gBAAK7C,UAAWC,EAAAA,UAAhB,UACI,mBAAQM,KAAK,SAASP,UAAWC,EAAAA,IAAjC,SAAwC,oBAOnD,EC5CD,EAxBiB,WACb,IAAMT,GAAWO,EAAAA,EAAAA,IAAYT,GAEvBO,GAAWC,EAAAA,EAAAA,MAKjB,OAJAuD,EAAAA,EAAAA,YAAU,WACVxD,GAASyD,EAAAA,EAAAA,MACR,GAAE,CAACzD,KAGA,iBAAKG,UAAWC,EAAhB,WACI,SAAC0B,EAAD,CAAShB,MAAM,YAAf,UACI,SAAC6B,EAAD,OAEJ,UAACb,EAAD,CAAShB,MAAM,WAAf,UACKnB,EAAS+D,OAAS,IAAK,SAAC3D,EAAD,IACvBJ,EAAS+D,OAAS,IACf,SAACnC,EAAD,IAEH5B,EAAS+D,OAAS,IAAK,SAAC1B,EAAD,CAAcC,QAAQ,qDAI7D,C","sources":["webpack://goit-react-hw-08-phonebook/./src/pages/ContactsPage/ContactsPage.module.css?0a45","redux/contacts/contactsSelectors.js","components/Filter/Filter.module.css","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactItem/ContactItem.module.css","components/ContactItem/ContactItem.jsx","components/ContactsList/ContactsList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Notification/Notification.module.css?a91f","components/Notification/Notification.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactsPage_container__BnqXB\"};","export const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;","// extracted by mini-css-extract-plugin\nexport default {};","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport s from \"./Filter.module.css\";\nimport { selectFilter } from \"redux/contacts/contactsSelectors\";\nimport { setFilter } from \"redux/contacts/filterSlice\";\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(selectFilter);\n\n    const handleChange = event => {\n        dispatch(\n            setFilter(event.target.value));\n    };\n\n    return (\n        <>\n        <h2 className={s.title}>Contacts</h2>\n    \n            <label className={s.label}>\n                <span className={s.label__text}>Find contacts by name</span>\n                <input\n                    onChange={handleChange}\n                    value={filter}\n                    type=\"text\"\n                    name=\"filter\"\n                    placeholder=\"Find\"\n                    className={s.input}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Find contacts by name\"\n                    required\n                />\n            </label>\n        </>\n    );\n};\n\nFilter.propTypes = {\n    filter: PropTypes.func,\n};","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactsList_list__mmE3Y\"};","// extracted by mini-css-extract-plugin\nexport default {};","import s from \"./ContactItem.module.css\";\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsOperations';\n\nexport const ContactItem = ({ contactItem }) => {\n    const dispatch = useDispatch();\n    const del = () => {\n        dispatch(deleteContact(contactItem.id));\n    };\n\n    return (\n        <li className={s.item} id={contactItem.id}>\n        <span className={s.name}>{contactItem.name}</span>\n        <a href={`tel:${contactItem.number}`} className={s.number}>\n            {contactItem.number}\n        </a>\n\n        <button type=\"button\" onClick={del} aria-label=\"Delete contact\">\n            Delete\n        </button>\n        </li>\n    );\n};\n","import { useSelector } from 'react-redux';\nimport s from './ContactsList.module.css';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { selectContacts, selectFilter } from 'redux/contacts/contactsSelectors';\n\nexport const ContactsList = () => {\n    const contacts = useSelector(selectContacts);\n    const filter = useSelector(selectFilter);\n\n    const filteredContacts = contacts.filter(el => {\n        return el.name.toLowerCase().includes(filter.toLowerCase());\n    });\n\n    return (\n        <ul className={s.list}>\n            {filteredContacts.map(contact => (\n            <ContactItem contactItem={contact} key={contact.id} />\n            ))}\n        </ul>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Section_title__SLHvV\"};","import s from './Section.module.css';\nimport PropTypes from 'prop-types';\n\nexport const Section = ({ title, children }) => {\n    return (\n        <section className={s.section}>\n            <h2 className={s.title}>{title}</h2>\n            {children}\n        </section>\n    );\n};\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired\n};","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Notification_title__VBwHl\"};","import { PropTypes } from 'prop-types';\nimport s from \"./Notification.module.css\";\n\nexport const Notification = ({ message }) => {\n    return <h3 className={s.title}>{message}</h3>;\n};\n\nNotification.propTypes = {\n    message: PropTypes.string,\n};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"btn\":\"ContactForm_btn__wll+u\",\"disabled\":\"ContactForm_disabled__XBn+S\",\"active\":\"ContactForm_active__JbGHE\",\"show\":\"ContactForm_show__Ix6Wl\",\"dropdown-toggle\":\"ContactForm_dropdown-toggle__qsVAO\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import s from './ContactForm.module.css';\nimport { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { addContact } from 'redux/contacts/contactsOperations';\n\nexport const ContactForm = () => {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n    const nameInputId = nanoid();\n    const numberInputId = nanoid();\n\n    const handelInputChange = event => {\n        const { name, value } = event.target;\n    \n        if (name === 'name') setName(value);\n        if (name === 'number') setNumber(value);\n    };\n    \n    const onSubmitForm = event => {\n        event.preventDefault();\n        if (contacts.some(el => el.name.toLowerCase() === name.toLowerCase())) {\n            return alert(`We already have ${name}`);\n        }\n        dispatch(addContact({ name: name, number: number, id: nanoid() }));\n    \n        reset();\n    };\n    \n    const reset = () => {\n        setName('');\n        setNumber('');\n    };\n\n    return (\n        <form className={s.form} onSubmit={onSubmitForm}>\n            <label className={s.label} id={nameInputId}>\n                <span className={s.label__text}>Name</span>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    onChange={handelInputChange}\n                    placeholder=\"Contact name\"\n                    aria-label=\"Input for your name\"\n                    className={s.input}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                    id={nameInputId}\n                />\n            </label>\n    \n            <label className={s.label} id={numberInputId}>\n                <span className={s.label__text}>Number</span>\n                <input\n                    value={number}\n                    onChange={handelInputChange}\n                    type=\"tel\"\n                    name=\"number\"\n                    placeholder=\"Phone number\"\n                    aria-label=\"Input for your phone number\"\n                    className={s.input}\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                    id={numberInputId}\n                />\n            </label>\n    \n        <div className={s.container}>\n            <button type=\"submit\" className={s.btn}>\n                Add contact\n            </button>\n        </div>\n\n        </form>\n    );\n};","import s from \"./ContactsPage.module.css\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Section } from \"components/Section/Section\";\nimport { Notification } from \"components/Notification/Notification\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\n\nconst Contacts = () => {\n    const contacts = useSelector(selectContacts);\n\n    const dispatch = useDispatch();\n    useEffect(() => {\n    dispatch(fetchContacts());\n    }, [dispatch]);\n\n    return (\n        <div className={s.container}>\n            <Section title=\"Phonebook\">\n                <ContactForm />\n            </Section>\n            <Section title=\"Contacts\">\n                {contacts.length > 1 && <Filter /> }\n                {contacts.length > 0 && (\n                    <ContactsList />\n                )}\n                {contacts.length < 1 && <Notification message=\"You phonebook is empty! Please add contact.\"/>}\n            </Section>\n        </div>\n    );\n};\n\nexport default Contacts;"],"names":["selectContacts","state","contacts","items","selectFilter","filter","Filter","dispatch","useDispatch","useSelector","className","s","onChange","event","setFilter","target","value","type","name","placeholder","pattern","title","required","ContactItem","contactItem","id","href","number","onClick","deleteContact","ContactsList","filteredContacts","el","toLowerCase","includes","map","contact","Section","children","Notification","message","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","ContactForm","useState","setName","setNumber","nameInputId","numberInputId","handelInputChange","reset","onSubmit","preventDefault","some","alert","addContact","useEffect","fetchContacts","length"],"sourceRoot":""}